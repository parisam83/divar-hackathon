// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PoiType string

const (
	PoiTypeSubway      PoiType = "subway"
	PoiTypeHospital    PoiType = "hospital"
	PoiTypeSuperMarket PoiType = "super_market"
	PoiTypeBusStation  PoiType = "bus_station"
	PoiTypeFruitMarket PoiType = "fruit_market"
)

func (e *PoiType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PoiType(s)
	case string:
		*e = PoiType(s)
	default:
		return fmt.Errorf("unsupported scan type for PoiType: %T", src)
	}
	return nil
}

type NullPoiType struct {
	PoiType PoiType `json:"poi_type"`
	Valid   bool    `json:"valid"` // Valid is true if PoiType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPoiType) Scan(value interface{}) error {
	if value == nil {
		ns.PoiType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PoiType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPoiType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PoiType), nil
}

type Poi struct {
	ID        int32            `db:"id" json:"id"`
	Name      string           `db:"name" json:"name"`
	Address   pgtype.Text      `db:"address" json:"address"`
	Type      PoiType          `db:"type" json:"type"`
	Latitude  float64          `db:"latitude" json:"latitude"`
	Longitude float64          `db:"longitude" json:"longitude"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
}

type Post struct {
	PostID    string           `db:"post_id" json:"post_id"`
	Latitude  float64          `db:"latitude" json:"latitude"`
	Longitude float64          `db:"longitude" json:"longitude"`
	Title     pgtype.Text      `db:"title" json:"title"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}
