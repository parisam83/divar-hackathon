// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: oauth.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addOAuthData = `-- name: AddOAuthData :exec
INSERT INTO oauth (session_id, access_token, refresh_token, expires_in, post_token)
VALUES ($1, $2, $3, $4, $5)
`

type AddOAuthDataParams struct {
	SessionID    string           `db:"session_id" json:"session_id"`
	AccessToken  string           `db:"access_token" json:"access_token"`
	RefreshToken string           `db:"refresh_token" json:"refresh_token"`
	ExpiresIn    pgtype.Timestamp `db:"expires_in" json:"expires_in"`
	PostToken    string           `db:"post_token" json:"post_token"`
}

func (q *Queries) AddOAuthData(ctx context.Context, arg AddOAuthDataParams) error {
	_, err := q.db.Exec(ctx, addOAuthData,
		arg.SessionID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresIn,
		arg.PostToken,
	)
	return err
}

const getOAuthBySessionId = `-- name: GetOAuthBySessionId :one
SELECT id, session_id, access_token, refresh_token, expires_in, post_token, created_at, updated_at FROM oauth WHERE session_id = $1
`

func (q *Queries) GetOAuthBySessionId(ctx context.Context, sessionID string) (Oauth, error) {
	row := q.db.QueryRow(ctx, getOAuthBySessionId, sessionID)
	var i Oauth
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresIn,
		&i.PostToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
