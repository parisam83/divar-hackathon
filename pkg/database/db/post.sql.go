// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: post.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertPost = `-- name: InsertPost :exec
INSERT INTO posts (post_id, user_id, access_token, refresh_token, expires_in)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (post_id) DO UPDATE
SET 
    access_token = EXCLUDED.access_token,
    refresh_token = EXCLUDED.refresh_token,
    expires_in = EXCLUDED.expires_in,
    updated_at=CURRENT_TIMESTAMP
WHERE now() > posts.expires_in
`

type InsertPostParams struct {
	PostID       string           `db:"post_id" json:"post_id"`
	UserID       string           `db:"user_id" json:"user_id"`
	AccessToken  string           `db:"access_token" json:"access_token"`
	RefreshToken string           `db:"refresh_token" json:"refresh_token"`
	ExpiresIn    pgtype.Timestamp `db:"expires_in" json:"expires_in"`
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) error {
	_, err := q.db.Exec(ctx, insertPost,
		arg.PostID,
		arg.UserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresIn,
	)
	return err
}

const updatePostCoordinates = `-- name: UpdatePostCoordinates :exec
UPDATE posts
SET 
    latitude = $1,
    longitude = $2,
    coordinates_set = TRUE
WHERE post_id = $3
`

type UpdatePostCoordinatesParams struct {
	Latitude  interface{} `db:"latitude" json:"latitude"`
	Longitude interface{} `db:"longitude" json:"longitude"`
	PostID    string      `db:"post_id" json:"post_id"`
}

func (q *Queries) UpdatePostCoordinates(ctx context.Context, arg UpdatePostCoordinatesParams) error {
	_, err := q.db.Exec(ctx, updatePostCoordinates, arg.Latitude, arg.Longitude, arg.PostID)
	return err
}
