// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: post.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const getPost = `-- name: GetPost :one
SELECT post_id, latitude, longitude, title, created_at, updated_at
FROM posts
WHERE post_id = $1
`

func (q *Queries) GetPost(ctx context.Context, postID string) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, postID)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.Latitude,
		&i.Longitude,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPost = `-- name: InsertPost :execresult
INSERT INTO posts (post_id, latitude, longitude,title)
VALUES ($1, $2, $3,$4)
ON CONFLICT (post_id) DO UPDATE
SET 
    latitude = EXCLUDED.latitude,
    longitude = EXCLUDED.longitude
`

type InsertPostParams struct {
	PostID    string      `db:"post_id" json:"post_id"`
	Latitude  float64     `db:"latitude" json:"latitude"`
	Longitude float64     `db:"longitude" json:"longitude"`
	Title     pgtype.Text `db:"title" json:"title"`
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertPost,
		arg.PostID,
		arg.Latitude,
		arg.Longitude,
		arg.Title,
	)
}

const updatePostCoordinates = `-- name: UpdatePostCoordinates :execresult


UPDATE posts
SET 
    latitude = $1,
    longitude = $2
WHERE post_id = $3
`

type UpdatePostCoordinatesParams struct {
	Latitude  float64 `db:"latitude" json:"latitude"`
	Longitude float64 `db:"longitude" json:"longitude"`
	PostID    string  `db:"post_id" json:"post_id"`
}

//	access_token = EXCLUDED.access_token,
//	refresh_token = EXCLUDED.refresh_token,
//	expires_in = EXCLUDED.expires_in,
//	updated_at=CURRENT_TIMESTAMP
//
// WHERE now() > posts.expires_in;
func (q *Queries) UpdatePostCoordinates(ctx context.Context, arg UpdatePostCoordinatesParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updatePostCoordinates, arg.Latitude, arg.Longitude, arg.PostID)
}
