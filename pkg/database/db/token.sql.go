// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: token.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAccessTokenByUserIdPostId = `-- name: GetAccessTokenByUserIdPostId :one
SELECT t.id, t.post_id, user_id, access_token, refresh_token, expires_at, t.created_at, t.updated_at, p.post_id, latitude, longitude, p.created_at, p.updated_at, title, u.id, u.created_at, u.updated_at FROM tokens t
JOIN posts p ON p.post_id=t.post_id
JOIN users u ON u.id=t.user_id
WHERE  u.id = $1 AND 
        p.post_id = $2
LIMIT 1
`

type GetAccessTokenByUserIdPostIdParams struct {
	ID     string `db:"id" json:"id"`
	PostID string `db:"post_id" json:"post_id"`
}

type GetAccessTokenByUserIdPostIdRow struct {
	ID           int32              `db:"id" json:"id"`
	PostID       string             `db:"post_id" json:"post_id"`
	UserID       string             `db:"user_id" json:"user_id"`
	AccessToken  string             `db:"access_token" json:"access_token"`
	RefreshToken string             `db:"refresh_token" json:"refresh_token"`
	ExpiresAt    pgtype.Timestamp   `db:"expires_at" json:"expires_at"`
	CreatedAt    pgtype.Timestamp   `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamp   `db:"updated_at" json:"updated_at"`
	PostID_2     string             `db:"post_id_2" json:"post_id_2"`
	Latitude     float64            `db:"latitude" json:"latitude"`
	Longitude    float64            `db:"longitude" json:"longitude"`
	CreatedAt_2  pgtype.Timestamp   `db:"created_at_2" json:"created_at_2"`
	UpdatedAt_2  pgtype.Timestamp   `db:"updated_at_2" json:"updated_at_2"`
	Title        pgtype.Text        `db:"title" json:"title"`
	ID_2         string             `db:"id_2" json:"id_2"`
	CreatedAt_3  pgtype.Timestamptz `db:"created_at_3" json:"created_at_3"`
	UpdatedAt_3  pgtype.Timestamptz `db:"updated_at_3" json:"updated_at_3"`
}

func (q *Queries) GetAccessTokenByUserIdPostId(ctx context.Context, arg GetAccessTokenByUserIdPostIdParams) (GetAccessTokenByUserIdPostIdRow, error) {
	row := q.db.QueryRow(ctx, getAccessTokenByUserIdPostId, arg.ID, arg.PostID)
	var i GetAccessTokenByUserIdPostIdRow
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PostID_2,
		&i.Latitude,
		&i.Longitude,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.Title,
		&i.ID_2,
		&i.CreatedAt_3,
		&i.UpdatedAt_3,
	)
	return i, err
}
